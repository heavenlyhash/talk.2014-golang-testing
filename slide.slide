Testing in Go
Safely Enhance Your Confidence Stronger, Naturally!
18:00 22 Oct 2014
Tags: testing, tdd, goconvey, gomn

Eric Myhre
hash@exultant.us
https://polydawn.net/


* First...

http://talks.golang.org/2014/testing.slide

Read at at least through slide 9.
# You can check out the rest of the slides on your own time; they're a little heavy for now and also talk a lot about http.


* golang testing

hello gophers, wannabe gophers, or gopher-curious!

i'm here to talk to you tonight about testing.


* golang testing

i'm not going to talk about why testing, or philosophies of testing, 

i'm just going to assume you're sold on testing.

which is interesting, because golang feels the same way:


* golang has built in testing


* golang has built in testing

testing is a part of the standard library and core toolchain.


* golang testing is a minimal interface

_What_do_you_actually_need_to_make_tests?_


* golang testing is a minimal interface

_What_do_you_actually_need_to_make_tests?_

1. A way to name the tests.

Done:

	import (
		"testing"
	)

	func TestMyThings(t *testing.T) {

	}

Function names.


* golang testing is a minimal interface

_What_do_you_actually_need_to_make_tests?_

1. A way to name the tests.
2. A way to make asserts.

\.
\.
\.

Well, no actually.



* golang testing is a minimal interface

_What_do_you_actually_need_to_make_tests?_

1. A way to name the tests.
2. A way to make the test fail!

Done:

	t.Fail()

There are other methods that do the same thing plus an error message, but they all boil down to this.

Use `if`assertion`{`t.Fail()`}` to dream of your old {x}Unit ways


* golang testing is a minimal interface

_What_do_you_actually_need_to_make_tests?_

1. A way to name the tests.
2. A way to make the test fail!
3. A way to run the tests!

Done:

	go test

Or,

	go test -v


* go test output

`go`test` output is silent by default.

`go`test`-v` tells you as it walks through things.




* what else goes with testing?



* what else goes with testing?

- benchmarking

- coverage


* benchmark


* benchmark

Benchmarking is pretty much the same thing as unit testing...

You just run it again.  And again.

(And count some things.)


* benchmark

Of course, it's not that easy.

If you've ever tried to benchmark using the tools at hand...

When the tools at hand are something like jUnit...

You have _Experienced_Bij_.


* benchmark

- this is something the QA department at code42 jokes about

- or at least the ones with a major Star Trek infatuation


* benchmark

- Bij is the Klingon hell.


* benchmark

- Trial by combat


* benchmark

- if you've ever tried to benchmark using the tools at hand...

- when the tools at hand are something like jUnit...

- you have experienced trial by combat


* benchmarking in go

- now we have `testing.B`

- is it that simple?

- yes




* ? talk about race detector


* more advanced (read: prettier) testing with goconvey

the `testing` package, like the `net/http` package, is a GREAT starting point.

it also explicitly doesn't try to solve the world's problems.

it's a minimal interface.


* more advanced (read: prettier) testing with ???

there are lots of others!

- ginkgo
- you can even do gherkin if you're into, well, that.
- ____???____


