Testing in Go
Safely Enhance Your Confidence Stronger, Naturally!
18:00 22 Oct 2014
Tags: testing, tdd, goconvey, gomn

Eric Myhre
hash@exultant.us
https://polydawn.net/


* golang testing

hello gophers, wannabe gophers, or gopher-curious!

i'm here to talk to you tonight about testing.


* golang testing

i'm not going to talk about why testing, or philosophies of testing, 

i'm just going to assume you're sold on testing.

# i'm going to assume you already know that if you're not writing tests, you're not writing software (you're writing a fairy tale)

which is interesting, because golang feels the same way:


* golang has built in testing


* golang has built in testing

testing is a part of the standard library and core toolchain.

`testing` is a package.

`testing.T` provides everything you need to make tests.

`go test` knows what these are, and it uses them for great good.


* golang testing is a minimal interface

_What_do_you_actually_need_to_make_tests?_


* golang testing is a minimal interface

_What_do_you_actually_need_to_make_tests?_

1. A way to name the tests.

Done:

	import (
		"testing"
	)

	func TestMyThings(t *testing.T) {

	}

Function names.


* golang testing is a minimal interface

_What_do_you_actually_need_to_make_tests?_

1. A way to name the tests.
2. A way to make asserts.

\.
\.
\.

Well, no actually.



* golang testing is a minimal interface

_What_do_you_actually_need_to_make_tests?_

1. A way to name the tests.
2. A way to make the test fail!

Done:

	t.Fail()

There are other methods that do the same thing plus an error message, but they all boil down to this.

Use `if`assertion`{`t.Fail()`}` to dream of your old {x}Unit ways


* golang testing is a minimal interface

_What_do_you_actually_need_to_make_tests?_

1. A way to name the tests.
2. A way to make the test fail!
3. A way to run the tests!

Done:

	go test

Or,

	go test -v


* go test output

`go`test` is very terse by default:

	$ go test polydawn.net/grypt/...
	FAIL    polydawn.net/grypt/cli          0.036s
	ok      polydawn.net/grypt/ext/blake2b  0.008s
	ok      polydawn.net/grypt/gitutil      0.145s
	?       polydawn.net/grypt/main         [no test files]
	ok      polydawn.net/grypt/schema       0.007s
	?       polydawn.net/grypt/testutil     [no test files]
	ok      polydawn.net/grypt/vault        0.007s

(Psst!  Look at that iteration time!)

Pass/fail is listed per package; nothing else.


* go test output

`go`test`-v` tells you much more as it walks through things:

	=== RUN TestSum
	--- PASS: TestSum (0.00 seconds)
	=== RUN TestSum256
	--- PASS: TestSum256 (0.00 seconds)
	=== RUN TestSumLength
	--- PASS: TestSumLength (0.00 seconds)
	=== RUN TestKeyedSum
	--- PASS: TestKeyedSum (0.00 seconds)
	PASS
	ok      polydawn.net/grypt/ext/blake2b  0.008s

By default, stdout/stderr are consumed by the test framework.

`-v` also will let them through again.




* what else goes with testing?


* what else goes with testing?

- benchmarking

- coverage


* benchmark


* benchmark

Benchmarking is pretty much the same thing as unit testing...

You just run it again.  And again.

(And count some things.)

\.
\.
\.

Of course, it's not that easy.


* benchmark

- If you've ever tried to benchmark using the tools at hand...

- When the tools at hand are something like jUnit...

- You have _Experienced_Bij_.


* benchmark

- this is something the QA department at code42 jokes about

- or at least the ones with a major Star Trek infatuation


* benchmark

- Bij is the Klingon hell.


* benchmark

- Trial by combat


* benchmark

- if you've ever tried to benchmark using the tools at hand...

- when the tools at hand are something like jUnit...

- you have experienced trial by combat


* benchmarking in go

- now we have `testing.B`

- is it that simple?

- yes


* benchmarking in go

The source is about as simple as `testing.T`:

	import "testing"

	func BenchmarkMyThing(b *testing.B) {
		b.ReportAllocs()
		// ... do work ...
	}

* benchmarking in go

Results?

	$ go test -bench . polydawn.net/grypt/schema
	BenchmarkAES256Encrypt1K    50000             52513 ns/op            4598 B/op         31 allocs/op
	BenchmarkAES256Decrypt1K    50000             63730 ns/op           35736 B/op         26 allocs/op
	BenchmarkAES256Encrypt4K    10000            147273 ns/op           10736 B/op         31 allocs/op
	BenchmarkAES256Decrypt4K    10000            137612 ns/op           38808 B/op         26 allocs/op
	BenchmarkAES256Encrypt1M       50          31593407 ns/op         2099720 B/op         32 allocs/op
	BenchmarkAES256Decrypt1M      100          25271531 ns/op         1083288 B/op         57 allocs/op
	BenchmarkAES256Encrypt2M       50          63500107 ns/op         4196872 B/op         32 allocs/op
	BenchmarkAES256Decrypt2M       50          50713520 ns/op         2131864 B/op         89 allocs/op
	BenchmarkAES256Encrypt4M       10         127749084 ns/op         8391177 B/op         32 allocs/op
	BenchmarkAES256Decrypt4M       20         101847749 ns/op         4229016 B/op        153 allocs/op
	ok      polydawn.net/grypt/schema       25.727s


* benchmarking in go

Results!

- Tasks adjust run count to fit in (approximately) constant time frame.

- Time per operation is averaged.  (Notice how the unit is nanoseconds, because this is a REAL programming language.)

- Memory stats too: how many bytes were shuffled, and in how many allocs.



* coverage


* coverage

The `go` tool can report test coverage statistics.

	$ go test -cover
	PASS
	coverage: 96.4% of statements
	ok strings 0.692s

The `go` tool can generate coverage profiles that may be intepreted by the `cover` tool.

	$ go test -coverprofile=cover.out
	$ go tool cover -func=cover.out
	strings/reader.go: Len 66.7%
	strings/strings.go: TrimSuffix 100.0%
	... many lines omitted ...
	strings/strings.go: Replace 100.0%
	strings/strings.go: EqualFold 100.0%
	total: (statements) 96.4%

* coverage visualization

	$ go tool cover -html=cover.out

.image cover.png

* coverage visualization

You can also ask `go` to count how heavily code paths are hit:

	$ go test -covermode=count -coverprofile=cover.out
	$ go tool cover -html=cover.out

.image cover-count.png



* what else is cool?


* Table-driven tests

Go's struct literal syntax makes it easy to write table-driven tests:

	func TestIndex(t *testing.T) {
		var tests = []struct {
				s string
				sep string
				out int
			}{
				{"", "", 0},
				{"", "a", -1},
				{"fo", "foo", -1},
				{"foo", "foo", 0},
				{"oofofoofooo", "f", 2},
				// etc
		}
		for _, test := range tests {
			actual := strings.Index(test.s, test.sep)
			if actual != test.out {
				t.Errorf("Index(%q,%q) = %v; want %v", test.s, test.sep, actual, test.out)
			}
		}
	}


* automatic race detection

Just add `-race`:

	$ go test -race mypkg

The compiler will add instrumentation that does data tainting, which can instantly detect unsynchronized memory access from threads.

This works _even_without_actually_experiencing_a_race_.


* automatic race detection

It's impossible to express how awesome this is.

This race detector can shortcut through millions of CPU-hours of testing.

That saves whole percentage points of human sanity.



* we have to go deeper


* we have to go deeper

The `testing` package, like the `net/http` package, is a GREAT starting point.

It also explicitly doesn't try to solve the world's problems.

It's a minimal interface.


* more advanced (read: prettier) testing with goconvey


* more advanced (read: prettier) testing with ???

there are lots of others!

[[https://github.com/coocood/assrt/][github.com/coocood/assrt]] does assert statements, no fluff

[[https://github.com/onsi/ginkgo/][github.com/onsi/ginkgo]] is a big bag of BDD like goconvey

you can even sit around [[https://github.com/harlanji/gogherkit][gherkin]] off if you're... well, into that.

audience suggestions?


* further reading

[[http://talks.golang.org/2014/testing.slide][talks.golang.org/2014/testing.slide]] is a great talk by the core golang folk

(Some slides lovingly borrowed from that -- but there's lots more there)

[[http://blog.golang.org/cover][blog.golang.org/cover]]

[[http://blog.golang.org/race-detector][blog.golang.org/race-detector]]


